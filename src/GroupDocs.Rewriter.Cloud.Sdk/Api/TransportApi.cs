/*
 * GroupDocs.Rewriter.Apigateway.Wab
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Client.Auth;
using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Detect paraphrasing in the document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DetectDocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);

        /// <summary>
        /// Detect paraphrasing in the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DetectDocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);
        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudDetectorResponse</returns>
        CloudDetectorResponse DetectDocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudDetectorResponse</returns>
        ApiResponse<CloudDetectorResponse> DetectDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DetectHcGet(int operationIndex = 0);

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DetectHcGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Detect paraphrasing in text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DetectTextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);

        /// <summary>
        /// Detect paraphrasing in text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DetectTextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);
        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudDetectorResponse</returns>
        CloudDetectorResponse DetectTextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudDetectorResponse</returns>
        ApiResponse<CloudDetectorResponse> DetectTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse DocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);

        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> DocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);
        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Summarize document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeDocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);

        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeDocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0);
        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        CloudFileResponse SummarizeDocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        ApiResponse<CloudFileResponse> SummarizeDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string SummarizeHcGet(int operationIndex = 0);

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SummarizeHcGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Summarize text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeTextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);

        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeTextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);
        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        CloudTextResponse SummarizeTextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        ApiResponse<CloudTextResponse> SummarizeTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse TextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);

        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> TextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0);
        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Detect paraphrasing in the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DetectDocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect paraphrasing in the document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DetectDocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudDetectorResponse</returns>
        System.Threading.Tasks.Task<CloudDetectorResponse> DetectDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudDetectorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudDetectorResponse>> DetectDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DetectHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DetectHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detect paraphrasing in text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DetectTextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect paraphrasing in text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DetectTextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudDetectorResponse</returns>
        System.Threading.Tasks.Task<CloudDetectorResponse> DetectTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudDetectorResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudDetectorResponse>> DetectTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeDocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        System.Threading.Tasks.Task<CloudFileResponse> SummarizeDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudFileResponse>> SummarizeDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SummarizeHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Health check for all services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SummarizeHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeTextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeTextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        System.Threading.Tasks.Task<CloudTextResponse> SummarizeTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudTextResponse>> SummarizeTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> TextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransportApi : ITransportApiSync, ITransportApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransportApi : ITransportApi
    {
        private GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransportApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransportApi(string basePath)
        {
            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransportApi(GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransportApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TransportApi(GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient client, GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient asyncClient, GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Detect paraphrasing in the document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DetectDocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = DetectDocumentPostWithHttpInfo(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect paraphrasing in the document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> DetectDocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DetectDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->DetectDocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DetectDocumentPost");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DetectDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/detect-document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect paraphrasing in the document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DetectDocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await DetectDocumentPostWithHttpInfoAsync(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect paraphrasing in the document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> DetectDocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DetectDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->DetectDocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DetectDocumentPost");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DetectDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/detect-document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudDetectorResponse</returns>
        public CloudDetectorResponse DetectDocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> localVarResponse = DetectDocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudDetectorResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> DetectDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DetectDocumentRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DetectDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudDetectorResponse>("/detect-document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudDetectorResponse</returns>
        public async System.Threading.Tasks.Task<CloudDetectorResponse> DetectDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> localVarResponse = await DetectDocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document detection status.  Also return probability of paraphrasing for the whole document and per paragraph 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudDetectorResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse>> DetectDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DetectDocumentRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DetectDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudDetectorResponse>("/detect-document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DetectHcGet(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = DetectHcGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> DetectHcGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.DetectHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/detect-hc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DetectHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = await DetectHcGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string>> DetectHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.DetectHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/detect-hc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect paraphrasing in text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DetectTextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = DetectTextPostWithHttpInfo(language, text, texts, suggestions, diversity, tokenize, origin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect paraphrasing in text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> DetectTextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DetectTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/detect-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect paraphrasing in text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DetectTextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await DetectTextPostWithHttpInfoAsync(language, text, texts, suggestions, diversity, tokenize, origin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect paraphrasing in text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> DetectTextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DetectTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/detect-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudDetectorResponse</returns>
        public CloudDetectorResponse DetectTextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> localVarResponse = DetectTextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudDetectorResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> DetectTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DetectTextRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DetectTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudDetectorResponse>("/detect-text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudDetectorResponse</returns>
        public async System.Threading.Tasks.Task<CloudDetectorResponse> DetectTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse> localVarResponse = await DetectTextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text detection status.  Also return probability of paraphrasing for the whole text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudDetectorResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudDetectorResponse>> DetectTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DetectTextRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DetectTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudDetectorResponse>("/detect-text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse DocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = DocumentPostWithHttpInfo(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> DocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DocumentPost");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> DocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await DocumentPostWithHttpInfoAsync(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> DocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->DocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->DocumentPost");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.DocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        public CloudFileResponse DocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = DocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> DocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DocumentRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        public async System.Threading.Tasks.Task<CloudFileResponse> DocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = await DocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse>> DocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->DocumentRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.DocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFileResponse>("/document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeDocumentPost(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeDocumentPostWithHttpInfo(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeDocumentPostWithHttpInfo(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->SummarizeDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->SummarizeDocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->SummarizeDocumentPost");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.SummarizeDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize-document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentPostAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeDocumentPostWithHttpInfoAsync(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outFormat">output file format</param>
        /// <param name="language">Language of original file</param>
        /// <param name="file">File as byte array</param>
        /// <param name="format">Input file format (optional, default to Unknown)</param>
        /// <param name="url">Link to file for rewriting (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="formatting">If document&#39;s formatting should be preserved, default true (optional)</param>
        /// <param name="minLength">Minimal number of characters in paragraph to detect paraphrasing (optional)</param>
        /// <param name="savingMode">Toggle file saving mode for storage.  Is Files by default. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeDocumentPostWithHttpInfoAsync(string outFormat, string language, System.IO.Stream file, string format = default(string), string url = default(string), string diversity = default(string), string origin = default(string), bool? formatting = default(bool?), int? minLength = default(int?), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outFormat' is set
            if (outFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outFormat' when calling TransportApi->SummarizeDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling TransportApi->SummarizeDocumentPost");
            }

            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'file' when calling TransportApi->SummarizeDocumentPost");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("OutFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outFormat)); // form parameter
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FileParameters.Add("File", file);
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (formatting != null)
            {
                localVarRequestOptions.FormParameters.Add("Formatting", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(formatting)); // form parameter
            }
            if (minLength != null)
            {
                localVarRequestOptions.FormParameters.Add("MinLength", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(minLength)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.SummarizeDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize-document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudFileResponse</returns>
        public CloudFileResponse SummarizeDocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = SummarizeDocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudFileResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> SummarizeDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->SummarizeDocumentRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.SummarizeDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudFileResponse>("/summarize-document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudFileResponse</returns>
        public async System.Threading.Tasks.Task<CloudFileResponse> SummarizeDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse> localVarResponse = await SummarizeDocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudFileResponse>> SummarizeDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->SummarizeDocumentRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.SummarizeDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudFileResponse>("/summarize-document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string SummarizeHcGet(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = SummarizeHcGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> SummarizeHcGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.SummarizeHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/summarize-hc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SummarizeHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string> localVarResponse = await SummarizeHcGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<string>> SummarizeHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "TransportApi.SummarizeHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/summarize-hc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeTextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeTextPostWithHttpInfo(language, text, texts, suggestions, diversity, tokenize, origin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeTextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.SummarizeTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeTextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeTextPostWithHttpInfoAsync(language, text, texts, suggestions, diversity, tokenize, origin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeTextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.SummarizeTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        public CloudTextResponse SummarizeTextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = SummarizeTextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> SummarizeTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->SummarizeTextRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.SummarizeTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudTextResponse>("/summarize-text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        public async System.Threading.Tasks.Task<CloudTextResponse> SummarizeTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = await SummarizeTextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrited text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse>> SummarizeTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->SummarizeTextRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.SummarizeTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudTextResponse>("/summarize-text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse TextPost(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = TextPostWithHttpInfo(language, text, texts, suggestions, diversity, tokenize, origin);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> TextPostWithHttpInfo(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> TextPostAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await TextPostWithHttpInfoAsync(language, text, texts, suggestions, diversity, tokenize, origin, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="language">Language of original text (optional)</param>
        /// <param name="text">Text to rewrite (optional)</param>
        /// <param name="texts">Text array to rewrite (optional)</param>
        /// <param name="suggestions">Number of suggested variants, 3 maximum (optional)</param>
        /// <param name="diversity">Diversity of text (optional)</param>
        /// <param name="tokenize">Should source and target texts be returned in tokenized form (optional)</param>
        /// <param name="origin">for analysis only (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> TextPostWithHttpInfoAsync(string language = default(string), string text = default(string), List<string> texts = default(List<string>), int? suggestions = default(int?), string diversity = default(string), bool? tokenize = default(bool?), string origin = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (language != null)
            {
                localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            }
            if (text != null)
            {
                localVarRequestOptions.FormParameters.Add("Text", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(text)); // form parameter
            }
            if (texts != null)
            {
                localVarRequestOptions.FormParameters.Add("Texts", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(texts)); // form parameter
            }
            if (suggestions != null)
            {
                localVarRequestOptions.FormParameters.Add("Suggestions", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(suggestions)); // form parameter
            }
            if (diversity != null)
            {
                localVarRequestOptions.FormParameters.Add("Diversity", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversity)); // form parameter
            }
            if (tokenize != null)
            {
                localVarRequestOptions.FormParameters.Add("Tokenize", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(tokenize)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }

            localVarRequestOptions.Operation = "TransportApi.TextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CloudTextResponse</returns>
        public CloudTextResponse TextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = TextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CloudTextResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> TextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->TextRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CloudTextResponse</returns>
        public async System.Threading.Tasks.Task<CloudTextResponse> TextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse> localVarResponse = await TextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CloudTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<CloudTextResponse>> TextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling TransportApi->TextRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "TransportApi.TextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CloudTextResponse>("/text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

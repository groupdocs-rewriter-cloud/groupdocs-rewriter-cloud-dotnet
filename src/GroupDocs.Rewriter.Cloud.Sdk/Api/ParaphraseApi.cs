/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.8.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Client.Auth;
using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParaphraseApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse ParaphraseDocumentPost(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0);

        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> ParaphraseDocumentPostWithHttpInfo(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0);
        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewriterFileResponse</returns>
        RewriterFileResponse ParaphraseDocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewriterFileResponse</returns>
        ApiResponse<RewriterFileResponse> ParaphraseDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Health check for all paraphrase services.
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckResponse</returns>
        HealthCheckResponse ParaphraseHcGet(int operationIndex = 0);

        /// <summary>
        /// Health check for all paraphrase services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        ApiResponse<HealthCheckResponse> ParaphraseHcGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse ParaphraseTextPost(TextRequest textRequest = default(TextRequest), int operationIndex = 0);

        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> ParaphraseTextPostWithHttpInfo(TextRequest textRequest = default(TextRequest), int operationIndex = 0);
        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewriterTextResponse</returns>
        RewriterTextResponse ParaphraseTextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewriterTextResponse</returns>
        ApiResponse<RewriterTextResponse> ParaphraseTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParaphraseApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> ParaphraseDocumentPostAsync(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rewrite document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> ParaphraseDocumentPostWithHttpInfoAsync(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewriterFileResponse</returns>
        System.Threading.Tasks.Task<RewriterFileResponse> ParaphraseDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewriterFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewriterFileResponse>> ParaphraseDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Health check for all paraphrase services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResponse</returns>
        System.Threading.Tasks.Task<HealthCheckResponse> ParaphraseHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Health check for all paraphrase services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> ParaphraseHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> ParaphraseTextPostAsync(TextRequest textRequest = default(TextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rewrite text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> ParaphraseTextPostWithHttpInfoAsync(TextRequest textRequest = default(TextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewriterTextResponse</returns>
        System.Threading.Tasks.Task<RewriterTextResponse> ParaphraseTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewriterTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RewriterTextResponse>> ParaphraseTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParaphraseApi : IParaphraseApiSync, IParaphraseApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ParaphraseApi : IParaphraseApi
    {
        private GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ParaphraseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ParaphraseApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParaphraseApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ParaphraseApi(string basePath)
        {
            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParaphraseApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ParaphraseApi(GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParaphraseApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ParaphraseApi(GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient client, GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient asyncClient, GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse ParaphraseDocumentPost(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = ParaphraseDocumentPostWithHttpInfo(outputFormat, language, format, diversityDegree, file, url, origin, savingMode);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> ParaphraseDocumentPostWithHttpInfo(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'outputFormat' is set
            if (outputFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outputFormat' when calling ParaphraseApi->ParaphraseDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling ParaphraseApi->ParaphraseDocumentPost");
            }

            // verify the required parameter 'format' is set
            if (format == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'format' when calling ParaphraseApi->ParaphraseDocumentPost");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("OutputFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outputFormat)); // form parameter
            if (diversityDegree != null)
            {
                localVarRequestOptions.FormParameters.Add("DiversityDegree", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversityDegree)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("File", file);
            }
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/paraphrase/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> ParaphraseDocumentPostAsync(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await ParaphraseDocumentPostWithHttpInfoAsync(outputFormat, language, format, diversityDegree, file, url, origin, savingMode, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputFormat">Target file format</param>
        /// <param name="language">Set language of text</param>
        /// <param name="format">Source file format</param>
        /// <param name="diversityDegree">Sets the degree of text modification (optional, default to Medium)</param>
        /// <param name="file"> (optional)</param>
        /// <param name="url"> (optional)</param>
        /// <param name="origin">Information about SDK user, like a User-Agent (optional)</param>
        /// <param name="savingMode">Mode of saving. By default is SavingMode.Files (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> ParaphraseDocumentPostWithHttpInfoAsync(string outputFormat, string language, string format, string diversityDegree = default(string), System.IO.Stream file = default(System.IO.Stream), string url = default(string), string origin = default(string), string savingMode = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputFormat' is set
            if (outputFormat == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'outputFormat' when calling ParaphraseApi->ParaphraseDocumentPost");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'language' when calling ParaphraseApi->ParaphraseDocumentPost");
            }

            // verify the required parameter 'format' is set
            if (format == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'format' when calling ParaphraseApi->ParaphraseDocumentPost");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FormParameters.Add("OutputFormat", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(outputFormat)); // form parameter
            if (diversityDegree != null)
            {
                localVarRequestOptions.FormParameters.Add("DiversityDegree", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(diversityDegree)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("Language", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(language)); // form parameter
            localVarRequestOptions.FormParameters.Add("Format", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(format)); // form parameter
            if (file != null)
            {
                localVarRequestOptions.FileParameters.Add("File", file);
            }
            if (url != null)
            {
                localVarRequestOptions.FormParameters.Add("Url", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(url)); // form parameter
            }
            if (origin != null)
            {
                localVarRequestOptions.FormParameters.Add("Origin", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(origin)); // form parameter
            }
            if (savingMode != null)
            {
                localVarRequestOptions.FormParameters.Add("SavingMode", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(savingMode)); // form parameter
            }

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/paraphrase/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewriterFileResponse</returns>
        public RewriterFileResponse ParaphraseDocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterFileResponse> localVarResponse = ParaphraseDocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewriterFileResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterFileResponse> ParaphraseDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling ParaphraseApi->ParaphraseDocumentRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RewriterFileResponse>("/paraphrase/document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewriterFileResponse</returns>
        public async System.Threading.Tasks.Task<RewriterFileResponse> ParaphraseDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterFileResponse> localVarResponse = await ParaphraseDocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document rewriting status.  Also return URLs for downloading of rewritten document if paraphrasig was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewriterFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterFileResponse>> ParaphraseDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling ParaphraseApi->ParaphraseDocumentRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewriterFileResponse>("/paraphrase/document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all paraphrase services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckResponse</returns>
        public HealthCheckResponse ParaphraseHcGet(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> localVarResponse = ParaphraseHcGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all paraphrase services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> ParaphraseHcGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HealthCheckResponse>("/paraphrase/hc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all paraphrase services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResponse</returns>
        public async System.Threading.Tasks.Task<HealthCheckResponse> ParaphraseHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> localVarResponse = await ParaphraseHcGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all paraphrase services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse>> ParaphraseHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheckResponse>("/paraphrase/hc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse ParaphraseTextPost(TextRequest textRequest = default(TextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = ParaphraseTextPostWithHttpInfo(textRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> ParaphraseTextPostWithHttpInfo(TextRequest textRequest = default(TextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/paraphrase/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> ParaphraseTextPostAsync(TextRequest textRequest = default(TextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await ParaphraseTextPostWithHttpInfoAsync(textRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rewrite text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="textRequest">String in body of request, containing JSON with parameters for rewriting. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> ParaphraseTextPostWithHttpInfoAsync(TextRequest textRequest = default(TextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = textRequest;

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/paraphrase/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RewriterTextResponse</returns>
        public RewriterTextResponse ParaphraseTextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterTextResponse> localVarResponse = ParaphraseTextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RewriterTextResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterTextResponse> ParaphraseTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling ParaphraseApi->ParaphraseTextRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<RewriterTextResponse>("/paraphrase/text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RewriterTextResponse</returns>
        public async System.Threading.Tasks.Task<RewriterTextResponse> ParaphraseTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterTextResponse> localVarResponse = await ParaphraseTextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text rewriting status.  Also return rewritten text if paraphrasing was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RewriterTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<RewriterTextResponse>> ParaphraseTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling ParaphraseApi->ParaphraseTextRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "ParaphraseApi.ParaphraseTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RewriterTextResponse>("/paraphrase/text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ParaphraseTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

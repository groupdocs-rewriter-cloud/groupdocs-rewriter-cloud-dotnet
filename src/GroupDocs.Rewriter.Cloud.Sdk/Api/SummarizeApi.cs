/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.1
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Client.Auth;
using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummarizeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Summarize document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeDocumentPost(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0);

        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeDocumentPostWithHttpInfo(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0);
        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizationFileResponse</returns>
        SummarizationFileResponse SummarizeDocumentRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizationFileResponse</returns>
        ApiResponse<SummarizationFileResponse> SummarizeDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Trial summarize document
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeDocumentTrialPost(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0);

        /// <summary>
        /// Trial summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeDocumentTrialPostWithHttpInfo(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0);
        /// <summary>
        /// Health check for all summarize services.
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckResponse</returns>
        HealthCheckResponse SummarizeHcGet(int operationIndex = 0);

        /// <summary>
        /// Health check for all summarize services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        ApiResponse<HealthCheckResponse> SummarizeHcGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> SummarizeSupportedConversionsGet(string format = default(string), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> SummarizeSupportedConversionsGetWithHttpInfo(string format = default(string), int operationIndex = 0);
        /// <summary>
        /// Summarize text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeTextPost(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0);

        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeTextPostWithHttpInfo(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0);
        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizationTextResponse</returns>
        SummarizationTextResponse SummarizeTextRequestIdGet(string requestId, int operationIndex = 0);

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizationTextResponse</returns>
        ApiResponse<SummarizationTextResponse> SummarizeTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0);
        /// <summary>
        /// Trial summarize text
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        StatusResponse SummarizeTextTrialPost(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0);

        /// <summary>
        /// Trial summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> SummarizeTextTrialPostWithHttpInfo(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummarizeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentPostAsync(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeDocumentPostWithHttpInfoAsync(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationFileResponse</returns>
        System.Threading.Tasks.Task<SummarizationFileResponse> SummarizeDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationFileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationFileResponse>> SummarizeDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trial summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentTrialPostAsync(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trial summarize document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeDocumentTrialPostWithHttpInfoAsync(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Health check for all summarize services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResponse</returns>
        System.Threading.Tasks.Task<HealthCheckResponse> SummarizeHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Health check for all summarize services.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<HealthCheckResponse>> SummarizeHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> SummarizeSupportedConversionsGetAsync(string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> SummarizeSupportedConversionsGetWithHttpInfoAsync(string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeTextPostAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeTextPostWithHttpInfoAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationTextResponse</returns>
        System.Threading.Tasks.Task<SummarizationTextResponse> SummarizeTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationTextResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SummarizationTextResponse>> SummarizeTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Trial summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> SummarizeTextTrialPostAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Trial summarize text
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> SummarizeTextTrialPostWithHttpInfoAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISummarizeApi : ISummarizeApiSync, ISummarizeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SummarizeApi : ISummarizeApi
    {
        private GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SummarizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummarizeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummarizeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SummarizeApi(string basePath)
        {
            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                new GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummarizeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SummarizeApi(GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.MergeConfigurations(
                GroupDocs.Rewriter.Cloud.Sdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SummarizeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SummarizeApi(GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient client, GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient asyncClient, GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GroupDocs.Rewriter.Cloud.Sdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeDocumentPost(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeDocumentPostWithHttpInfo(summarizationFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeDocumentPostWithHttpInfo(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationFileRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize/document", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentPostAsync(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeDocumentPostWithHttpInfoAsync(summarizationFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeDocumentPostWithHttpInfoAsync(SummarizationFileRequest summarizationFileRequest = default(SummarizationFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationFileRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize/document", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizationFileResponse</returns>
        public SummarizationFileResponse SummarizeDocumentRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationFileResponse> localVarResponse = SummarizeDocumentRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizationFileResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationFileResponse> SummarizeDocumentRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling SummarizeApi->SummarizeDocumentRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SummarizationFileResponse>("/summarize/document/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationFileResponse</returns>
        public async System.Threading.Tasks.Task<SummarizationFileResponse> SummarizeDocumentRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationFileResponse> localVarResponse = await SummarizeDocumentRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return document summarizing status.  Also return URLs for downloading of summarized document if summarization was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/document response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationFileResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationFileResponse>> SummarizeDocumentRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling SummarizeApi->SummarizeDocumentRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SummarizationFileResponse>("/summarize/document/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeDocumentTrialPost(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeDocumentTrialPostWithHttpInfo(summarizationTrialFileRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeDocumentTrialPostWithHttpInfo(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTrialFileRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize/document/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeDocumentTrialPostAsync(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeDocumentTrialPostWithHttpInfoAsync(summarizationTrialFileRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial summarize document 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTrialFileRequest">String in body of request, containing JSON with parameters for summarizing. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeDocumentTrialPostWithHttpInfoAsync(SummarizationTrialFileRequest summarizationTrialFileRequest = default(SummarizationTrialFileRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTrialFileRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeDocumentTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize/document/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeDocumentTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all summarize services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>HealthCheckResponse</returns>
        public HealthCheckResponse SummarizeHcGet(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> localVarResponse = SummarizeHcGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all summarize services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of HealthCheckResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> SummarizeHcGetWithHttpInfo(int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SummarizeApi.SummarizeHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<HealthCheckResponse>("/summarize/hc", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Health check for all summarize services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of HealthCheckResponse</returns>
        public async System.Threading.Tasks.Task<HealthCheckResponse> SummarizeHcGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse> localVarResponse = await SummarizeHcGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Health check for all summarize services. 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (HealthCheckResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<HealthCheckResponse>> SummarizeHcGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "SummarizeApi.SummarizeHcGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<HealthCheckResponse>("/summarize/hc", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeHcGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> SummarizeSupportedConversionsGet(string format = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<List<string>> localVarResponse = SummarizeSupportedConversionsGetWithHttpInfo(format);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<List<string>> SummarizeSupportedConversionsGetWithHttpInfo(string format = default(string), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeSupportedConversionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<string>>("/summarize/supportedConversions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeSupportedConversionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> SummarizeSupportedConversionsGetAsync(string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<List<string>> localVarResponse = await SummarizeSupportedConversionsGetWithHttpInfoAsync(format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<List<string>>> SummarizeSupportedConversionsGetWithHttpInfoAsync(string format = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeSupportedConversionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<string>>("/summarize/supportedConversions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeSupportedConversionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeTextPost(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeTextPostWithHttpInfo(summarizationTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeTextPostWithHttpInfo(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTextRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize/text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeTextPostAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeTextPostWithHttpInfoAsync(summarizationTextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeTextPostWithHttpInfoAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTextRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize/text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SummarizationTextResponse</returns>
        public SummarizationTextResponse SummarizeTextRequestIdGet(string requestId, int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationTextResponse> localVarResponse = SummarizeTextRequestIdGetWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SummarizationTextResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationTextResponse> SummarizeTextRequestIdGetWithHttpInfo(string requestId, int operationIndex = 0)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling SummarizeApi->SummarizeTextRequestIdGet");
            }

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SummarizationTextResponse>("/summarize/text/{requestId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SummarizationTextResponse</returns>
        public async System.Threading.Tasks.Task<SummarizationTextResponse> SummarizeTextRequestIdGetAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationTextResponse> localVarResponse = await SummarizeTextRequestIdGetWithHttpInfoAsync(requestId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Return text summarizing status status.  Also return rewrote text if translation was successful 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">GUID which got from /v3/rewriter/text response</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SummarizationTextResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<SummarizationTextResponse>> SummarizeTextRequestIdGetWithHttpInfoAsync(string requestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
            {
                throw new GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException(400, "Missing required parameter 'requestId' when calling SummarizeApi->SummarizeTextRequestIdGet");
            }


            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("requestId", GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.ParameterToString(requestId)); // path parameter

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextRequestIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SummarizationTextResponse>("/summarize/text/{requestId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextRequestIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse SummarizeTextTrialPost(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = SummarizeTextTrialPostWithHttpInfo(summarizationTextRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> SummarizeTextTrialPostWithHttpInfo(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0)
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTextRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<StatusResponse>("/summarize/text/trial", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Trial summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> SummarizeTextTrialPostAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse> localVarResponse = await SummarizeTextTrialPostWithHttpInfoAsync(summarizationTextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Trial summarize text 
        /// </summary>
        /// <exception cref="GroupDocs.Rewriter.Cloud.Sdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="summarizationTextRequest">String in body of request, containing JSON with parameters for summarizing. Maximum 1000 characters (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<GroupDocs.Rewriter.Cloud.Sdk.Client.ApiResponse<StatusResponse>> SummarizeTextTrialPostWithHttpInfoAsync(SummarizationTextRequest summarizationTextRequest = default(SummarizationTextRequest), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions localVarRequestOptions = new GroupDocs.Rewriter.Cloud.Sdk.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GroupDocs.Rewriter.Cloud.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = summarizationTextRequest;

            localVarRequestOptions.Operation = "SummarizeApi.SummarizeTextTrialPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<StatusResponse>("/summarize/text/trial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SummarizeTextTrialPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

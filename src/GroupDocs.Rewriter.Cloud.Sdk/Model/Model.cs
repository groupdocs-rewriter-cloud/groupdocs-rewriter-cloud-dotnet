/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Rewriter.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Rewriter.Cloud.Sdk.Model
{
    /// <summary>
    /// Model
    /// </summary>
    [DataContract(Name = "Model")]
    public partial class Model : IEquatable<Model>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Model" /> class.
        /// </summary>
        /// <param name="loaded">loaded.</param>
        /// <param name="modelsId">modelsId.</param>
        /// <param name="models">models.</param>
        /// <param name="opt">opt.</param>
        /// <param name="timeout">timeout.</param>
        /// <param name="tokenizer">tokenizer.</param>
        public Model(bool loaded = default(bool), int modelsId = default(int), List<string> models = default(List<string>), Opt opt = default(Opt), int timeout = default(int), Tokenizer tokenizer = default(Tokenizer))
        {
            this.Loaded = loaded;
            this.ModelsId = modelsId;
            this.Models = models;
            this.Opt = opt;
            this.Timeout = timeout;
            this.Tokenizer = tokenizer;
        }

        /// <summary>
        /// Gets or Sets Loaded
        /// </summary>
        [DataMember(Name = "loaded", EmitDefaultValue = true)]
        public bool Loaded { get; set; }

        /// <summary>
        /// Gets or Sets ModelsId
        /// </summary>
        [DataMember(Name = "models_id", EmitDefaultValue = false)]
        public int ModelsId { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<string> Models { get; set; }

        /// <summary>
        /// Gets or Sets Opt
        /// </summary>
        [DataMember(Name = "opt", EmitDefaultValue = false)]
        public Opt Opt { get; set; }

        /// <summary>
        /// Gets or Sets Timeout
        /// </summary>
        [DataMember(Name = "timeout", EmitDefaultValue = false)]
        public int Timeout { get; set; }

        /// <summary>
        /// Gets or Sets Tokenizer
        /// </summary>
        [DataMember(Name = "tokenizer", EmitDefaultValue = false)]
        public Tokenizer Tokenizer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Model {\n");
            sb.Append("  Loaded: ").Append(Loaded).Append("\n");
            sb.Append("  ModelsId: ").Append(ModelsId).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("  Opt: ").Append(Opt).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Tokenizer: ").Append(Tokenizer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Model);
        }

        /// <summary>
        /// Returns true if Model instances are equal
        /// </summary>
        /// <param name="input">Instance of Model to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Model input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Loaded == input.Loaded ||
                    this.Loaded.Equals(input.Loaded)
                ) && 
                (
                    this.ModelsId == input.ModelsId ||
                    this.ModelsId.Equals(input.ModelsId)
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                ) && 
                (
                    this.Opt == input.Opt ||
                    (this.Opt != null &&
                    this.Opt.Equals(input.Opt))
                ) && 
                (
                    this.Timeout == input.Timeout ||
                    this.Timeout.Equals(input.Timeout)
                ) && 
                (
                    this.Tokenizer == input.Tokenizer ||
                    (this.Tokenizer != null &&
                    this.Tokenizer.Equals(input.Tokenizer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Loaded.GetHashCode();
                hashCode = (hashCode * 59) + this.ModelsId.GetHashCode();
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                if (this.Opt != null)
                {
                    hashCode = (hashCode * 59) + this.Opt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timeout.GetHashCode();
                if (this.Tokenizer != null)
                {
                    hashCode = (hashCode * 59) + this.Tokenizer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

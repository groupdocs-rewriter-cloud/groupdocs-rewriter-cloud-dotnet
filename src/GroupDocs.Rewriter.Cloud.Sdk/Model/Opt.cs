/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Rewriter.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Rewriter.Cloud.Sdk.Model
{
    /// <summary>
    /// Opt
    /// </summary>
    [DataContract(Name = "Opt")]
    public partial class Opt : IEquatable<Opt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Opt" /> class.
        /// </summary>
        /// <param name="beamSize">beamSize.</param>
        /// <param name="gpu">gpu.</param>
        /// <param name="replaceUnk">replaceUnk.</param>
        public Opt(int beamSize = default(int), int gpu = default(int), bool replaceUnk = default(bool))
        {
            this.BeamSize = beamSize;
            this.Gpu = gpu;
            this.ReplaceUnk = replaceUnk;
        }

        /// <summary>
        /// Gets or Sets BeamSize
        /// </summary>
        [DataMember(Name = "beam_size", EmitDefaultValue = false)]
        public int BeamSize { get; set; }

        /// <summary>
        /// Gets or Sets Gpu
        /// </summary>
        [DataMember(Name = "gpu", EmitDefaultValue = false)]
        public int Gpu { get; set; }

        /// <summary>
        /// Gets or Sets ReplaceUnk
        /// </summary>
        [DataMember(Name = "replace_unk", EmitDefaultValue = true)]
        public bool ReplaceUnk { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Opt {\n");
            sb.Append("  BeamSize: ").Append(BeamSize).Append("\n");
            sb.Append("  Gpu: ").Append(Gpu).Append("\n");
            sb.Append("  ReplaceUnk: ").Append(ReplaceUnk).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Opt);
        }

        /// <summary>
        /// Returns true if Opt instances are equal
        /// </summary>
        /// <param name="input">Instance of Opt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Opt input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BeamSize == input.BeamSize ||
                    this.BeamSize.Equals(input.BeamSize)
                ) && 
                (
                    this.Gpu == input.Gpu ||
                    this.Gpu.Equals(input.Gpu)
                ) && 
                (
                    this.ReplaceUnk == input.ReplaceUnk ||
                    this.ReplaceUnk.Equals(input.ReplaceUnk)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.BeamSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Gpu.GetHashCode();
                hashCode = (hashCode * 59) + this.ReplaceUnk.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

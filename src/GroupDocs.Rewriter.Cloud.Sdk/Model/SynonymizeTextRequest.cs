/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 24.4.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Rewriter.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Rewriter.Cloud.Sdk.Model
{
    /// <summary>
    /// SynonymizeTextRequest
    /// </summary>
    [DataContract(Name = "SynonymizeTextRequest")]
    public partial class SynonymizeTextRequest : IEquatable<SynonymizeTextRequest>, IValidatableObject
    {
        /// <summary>
        /// Number of variants for rewriting
        /// </summary>
        /// <value>Number of variants for rewriting</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SynonymsEnum
        {
            /// <summary>
            /// Enum All for value: All
            /// </summary>
            [EnumMember(Value = "All")]
            All = 1,

            /// <summary>
            /// Enum One for value: One
            /// </summary>
            [EnumMember(Value = "One")]
            One = 2,

            /// <summary>
            /// Enum Two for value: Two
            /// </summary>
            [EnumMember(Value = "Two")]
            Two = 3,

            /// <summary>
            /// Enum Three for value: Three
            /// </summary>
            [EnumMember(Value = "Three")]
            Three = 4,

            /// <summary>
            /// Enum Four for value: Four
            /// </summary>
            [EnumMember(Value = "Four")]
            Four = 5,

            /// <summary>
            /// Enum Five for value: Five
            /// </summary>
            [EnumMember(Value = "Five")]
            Five = 6

        }


        /// <summary>
        /// Number of variants for rewriting
        /// </summary>
        /// <value>Number of variants for rewriting</value>
        [DataMember(Name = "synonyms", EmitDefaultValue = false)]
        public SynonymsEnum? Synonyms { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SynonymizeTextRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SynonymizeTextRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SynonymizeTextRequest" /> class.
        /// </summary>
        /// <param name="language">Set language of text (required).</param>
        /// <param name="text">Single text paragraph.</param>
        /// <param name="texts">Text paragraphs.</param>
        /// <param name="origin">Information about SDK user, like a User-Agent.</param>
        /// <param name="synonyms">Number of variants for rewriting.</param>
        public SynonymizeTextRequest(string language = default(string), string text = default(string), List<string> texts = default(List<string>), string origin = default(string), SynonymsEnum? synonyms = default(SynonymsEnum?))
        {
            // to ensure "language" is required (not null)
            if (language == null)
            {
                throw new ArgumentNullException("language is a required property for SynonymizeTextRequest and cannot be null");
            }
            this.Language = language;
            this.Text = text;
            this.Texts = texts;
            this.Origin = origin;
            this.Synonyms = synonyms;
        }

        /// <summary>
        /// Set language of text
        /// </summary>
        /// <value>Set language of text</value>
        [DataMember(Name = "language", IsRequired = true, EmitDefaultValue = true)]
        public string Language { get; set; }

        /// <summary>
        /// Single text paragraph
        /// </summary>
        /// <value>Single text paragraph</value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Text paragraphs
        /// </summary>
        /// <value>Text paragraphs</value>
        [DataMember(Name = "texts", EmitDefaultValue = false)]
        public List<string> Texts { get; set; }

        /// <summary>
        /// Information about SDK user, like a User-Agent
        /// </summary>
        /// <value>Information about SDK user, like a User-Agent</value>
        [DataMember(Name = "origin", EmitDefaultValue = false)]
        public string Origin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SynonymizeTextRequest {\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Texts: ").Append(Texts).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Synonyms: ").Append(Synonyms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SynonymizeTextRequest);
        }

        /// <summary>
        /// Returns true if SynonymizeTextRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SynonymizeTextRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SynonymizeTextRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Texts == input.Texts ||
                    this.Texts != null &&
                    input.Texts != null &&
                    this.Texts.SequenceEqual(input.Texts)
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.Synonyms == input.Synonyms ||
                    this.Synonyms.Equals(input.Synonyms)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Language != null)
                {
                    hashCode = (hashCode * 59) + this.Language.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Texts != null)
                {
                    hashCode = (hashCode * 59) + this.Texts.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Synonyms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Language (string) minLength
            if (this.Language != null && this.Language.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, length must be greater than 1.", new [] { "Language" });
            }

            yield break;
        }
    }

}

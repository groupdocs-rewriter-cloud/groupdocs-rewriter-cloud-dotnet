/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.1
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Rewriter.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Rewriter.Cloud.Sdk.Model
{
    /// <summary>
    /// SummarizationTextResponse
    /// </summary>
    [DataContract(Name = "SummarizationTextResponse")]
    public partial class SummarizationTextResponse : IEquatable<SummarizationTextResponse>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public HttpStatusCode? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SummarizationTextResponse" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="message">Information about process.</param>
        /// <param name="summarizationResult">summarizationResult.</param>
        /// <param name="summarizationResults">summarizationResults.</param>
        public SummarizationTextResponse(HttpStatusCode? status = default(HttpStatusCode?), string message = default(string), string summarizationResult = default(string), List<string> summarizationResults = default(List<string>))
        {
            this.Status = status;
            this.Message = message;
            this.SummarizationResult = summarizationResult;
            this.SummarizationResults = summarizationResults;
        }

        /// <summary>
        /// Information about process
        /// </summary>
        /// <value>Information about process</value>
        [DataMember(Name = "message", EmitDefaultValue = false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets SummarizationResult
        /// </summary>
        [DataMember(Name = "summarizationResult", EmitDefaultValue = true)]
        public string SummarizationResult { get; set; }

        /// <summary>
        /// Gets or Sets SummarizationResults
        /// </summary>
        [DataMember(Name = "summarizationResults", EmitDefaultValue = true)]
        public List<string> SummarizationResults { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SummarizationTextResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SummarizationResult: ").Append(SummarizationResult).Append("\n");
            sb.Append("  SummarizationResults: ").Append(SummarizationResults).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SummarizationTextResponse);
        }

        /// <summary>
        /// Returns true if SummarizationTextResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SummarizationTextResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SummarizationTextResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.SummarizationResult == input.SummarizationResult ||
                    (this.SummarizationResult != null &&
                    this.SummarizationResult.Equals(input.SummarizationResult))
                ) && 
                (
                    this.SummarizationResults == input.SummarizationResults ||
                    this.SummarizationResults != null &&
                    input.SummarizationResults != null &&
                    this.SummarizationResults.SequenceEqual(input.SummarizationResults)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.Message != null)
                {
                    hashCode = (hashCode * 59) + this.Message.GetHashCode();
                }
                if (this.SummarizationResult != null)
                {
                    hashCode = (hashCode * 59) + this.SummarizationResult.GetHashCode();
                }
                if (this.SummarizationResults != null)
                {
                    hashCode = (hashCode * 59) + this.SummarizationResults.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.1
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = GroupDocs.Rewriter.Cloud.Sdk.Client.OpenAPIDateConverter;

namespace GroupDocs.Rewriter.Cloud.Sdk.Model
{
    /// <summary>
    /// HealthCheckResponse
    /// </summary>
    [DataContract(Name = "HealthCheckResponse")]
    public partial class HealthCheckResponse : IEquatable<HealthCheckResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckResponse" /> class.
        /// </summary>
        /// <param name="initialRequest">initialRequest.</param>
        /// <param name="healthCheckInfo">healthCheckInfo.</param>
        /// <param name="models">models.</param>
        public HealthCheckResponse(CloudTextRequest initialRequest = default(CloudTextRequest), HealthCheckInfo healthCheckInfo = default(HealthCheckInfo), List<Model> models = default(List<Model>))
        {
            this.InitialRequest = initialRequest;
            this.HealthCheckInfo = healthCheckInfo;
            this.Models = models;
        }

        /// <summary>
        /// Gets or Sets InitialRequest
        /// </summary>
        [DataMember(Name = "initialRequest", EmitDefaultValue = false)]
        public CloudTextRequest InitialRequest { get; set; }

        /// <summary>
        /// Gets or Sets HealthCheckInfo
        /// </summary>
        [DataMember(Name = "healthCheckInfo", EmitDefaultValue = false)]
        public HealthCheckInfo HealthCheckInfo { get; set; }

        /// <summary>
        /// Gets or Sets Models
        /// </summary>
        [DataMember(Name = "models", EmitDefaultValue = false)]
        public List<Model> Models { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HealthCheckResponse {\n");
            sb.Append("  InitialRequest: ").Append(InitialRequest).Append("\n");
            sb.Append("  HealthCheckInfo: ").Append(HealthCheckInfo).Append("\n");
            sb.Append("  Models: ").Append(Models).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HealthCheckResponse);
        }

        /// <summary>
        /// Returns true if HealthCheckResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of HealthCheckResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthCheckResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InitialRequest == input.InitialRequest ||
                    (this.InitialRequest != null &&
                    this.InitialRequest.Equals(input.InitialRequest))
                ) && 
                (
                    this.HealthCheckInfo == input.HealthCheckInfo ||
                    (this.HealthCheckInfo != null &&
                    this.HealthCheckInfo.Equals(input.HealthCheckInfo))
                ) && 
                (
                    this.Models == input.Models ||
                    this.Models != null &&
                    input.Models != null &&
                    this.Models.SequenceEqual(input.Models)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InitialRequest != null)
                {
                    hashCode = (hashCode * 59) + this.InitialRequest.GetHashCode();
                }
                if (this.HealthCheckInfo != null)
                {
                    hashCode = (hashCode * 59) + this.HealthCheckInfo.GetHashCode();
                }
                if (this.Models != null)
                {
                    hashCode = (hashCode * 59) + this.Models.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.8.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Api;
// uncomment below to import models
//using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing ParaphraseApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ParaphraseApiTests : IDisposable
    {
        private ParaphraseApi instance;

        public ParaphraseApiTests()
        {
            instance = new ParaphraseApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ParaphraseApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' ParaphraseApi
            //Assert.IsType<ParaphraseApi>(instance);
        }

        /// <summary>
        /// Test ParaphraseDocumentPost
        /// </summary>
        [Fact]
        public void ParaphraseDocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string outFormat = null;
            //string language = null;
            //System.IO.Stream file = null;
            //string format = null;
            //string url = null;
            //string diversity = null;
            //string origin = null;
            //bool? formatting = null;
            //int? minLength = null;
            //string savingMode = null;
            //var response = instance.ParaphraseDocumentPost(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test ParaphraseDocumentRequestIdGet
        /// </summary>
        [Fact]
        public void ParaphraseDocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.ParaphraseDocumentRequestIdGet(requestId);
            //Assert.IsType<CloudFileResponse>(response);
        }

        /// <summary>
        /// Test ParaphraseHcGet
        /// </summary>
        [Fact]
        public void ParaphraseHcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ParaphraseHcGet();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test ParaphraseTextPost
        /// </summary>
        [Fact]
        public void ParaphraseTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TextRequest textRequest = null;
            //var response = instance.ParaphraseTextPost(textRequest);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test ParaphraseTextRequestIdGet
        /// </summary>
        [Fact]
        public void ParaphraseTextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.ParaphraseTextRequestIdGet(requestId);
            //Assert.IsType<CloudTextResponse>(response);
        }
    }
}

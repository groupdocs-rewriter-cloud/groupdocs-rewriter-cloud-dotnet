/*
 * GroupDocs.Rewriter.Apigateway.Wab
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using GroupDocs.Rewriter.Cloud.Sdk.Api;
using Xunit;

// uncomment below to import models
//using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing TransportApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class TransportApiTests : IDisposable
    {
        private TransportApi instance;

        public TransportApiTests()
        {
            instance = new TransportApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of TransportApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' TransportApi
            //Assert.IsType<TransportApi>(instance);
        }

        /// <summary>
        /// Test DetectDocumentPost
        /// </summary>
        [Fact]
        public void DetectDocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string outFormat = null;
            //string language = null;
            //System.IO.Stream file = null;
            //string format = null;
            //string url = null;
            //string diversity = null;
            //string origin = null;
            //bool? formatting = null;
            //int? minLength = null;
            //string savingMode = null;
            //var response = instance.DetectDocumentPost(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test DetectDocumentRequestIdGet
        /// </summary>
        [Fact]
        public void DetectDocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DetectDocumentRequestIdGet(requestId);
            //Assert.IsType<CloudDetectorResponse>(response);
        }

        /// <summary>
        /// Test DetectHcGet
        /// </summary>
        [Fact]
        public void DetectHcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DetectHcGet();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DetectTextPost
        /// </summary>
        [Fact]
        public void DetectTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //string text = null;
            //List<string> texts = null;
            //int? suggestions = null;
            //string diversity = null;
            //bool? tokenize = null;
            //string origin = null;
            //var response = instance.DetectTextPost(language, text, texts, suggestions, diversity, tokenize, origin);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test DetectTextRequestIdGet
        /// </summary>
        [Fact]
        public void DetectTextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DetectTextRequestIdGet(requestId);
            //Assert.IsType<CloudDetectorResponse>(response);
        }

        /// <summary>
        /// Test DocumentPost
        /// </summary>
        [Fact]
        public void DocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string outFormat = null;
            //string language = null;
            //System.IO.Stream file = null;
            //string format = null;
            //string url = null;
            //string diversity = null;
            //string origin = null;
            //bool? formatting = null;
            //int? minLength = null;
            //string savingMode = null;
            //var response = instance.DocumentPost(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test DocumentRequestIdGet
        /// </summary>
        [Fact]
        public void DocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DocumentRequestIdGet(requestId);
            //Assert.IsType<CloudFileResponse>(response);
        }

        /// <summary>
        /// Test HcGet
        /// </summary>
        [Fact]
        public void HcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.HcGet();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SummarizeDocumentPost
        /// </summary>
        [Fact]
        public void SummarizeDocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string outFormat = null;
            //string language = null;
            //System.IO.Stream file = null;
            //string format = null;
            //string url = null;
            //string diversity = null;
            //string origin = null;
            //bool? formatting = null;
            //int? minLength = null;
            //string savingMode = null;
            //var response = instance.SummarizeDocumentPost(outFormat, language, file, format, url, diversity, origin, formatting, minLength, savingMode);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test SummarizeDocumentRequestIdGet
        /// </summary>
        [Fact]
        public void SummarizeDocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.SummarizeDocumentRequestIdGet(requestId);
            //Assert.IsType<CloudFileResponse>(response);
        }

        /// <summary>
        /// Test SummarizeHcGet
        /// </summary>
        [Fact]
        public void SummarizeHcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SummarizeHcGet();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test SummarizeTextPost
        /// </summary>
        [Fact]
        public void SummarizeTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //string text = null;
            //List<string> texts = null;
            //int? suggestions = null;
            //string diversity = null;
            //bool? tokenize = null;
            //string origin = null;
            //var response = instance.SummarizeTextPost(language, text, texts, suggestions, diversity, tokenize, origin);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test SummarizeTextRequestIdGet
        /// </summary>
        [Fact]
        public void SummarizeTextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.SummarizeTextRequestIdGet(requestId);
            //Assert.IsType<CloudTextResponse>(response);
        }

        /// <summary>
        /// Test TextPost
        /// </summary>
        [Fact]
        public void TextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string language = null;
            //string text = null;
            //List<string> texts = null;
            //int? suggestions = null;
            //string diversity = null;
            //bool? tokenize = null;
            //string origin = null;
            //var response = instance.TextPost(language, text, texts, suggestions, diversity, tokenize, origin);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test TextRequestIdGet
        /// </summary>
        [Fact]
        public void TextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.TextRequestIdGet(requestId);
            //Assert.IsType<CloudTextResponse>(response);
        }
    }
}

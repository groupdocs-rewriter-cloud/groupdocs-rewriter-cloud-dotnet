/*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.11.1
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Threading;
using RestSharp;
using Xunit;

using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Api;
using GroupDocs.Rewriter.Cloud.Sdk.Client.Auth;
using GroupDocs.Rewriter.Cloud.Sdk.Model;

// uncomment below to import models
//using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing SimplifyApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SimplifyApiTests : IDisposable
    {
        private SimplifyApi instance;
        private FileApi _fileApi;

        public SimplifyApiTests()
        {
            var config = new Configuration()
            {
                OAuthClientId = Fixture.ClientId,
                OAuthClientSecret = Fixture.ClientSecret,
                OAuthFlow = OAuthFlow.APPLICATION,
                BasePath = Fixture.ApiUrl
            };
            instance = new SimplifyApi(config);
            _fileApi = new FileApi(config);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SimplifyApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' SimplifyApi
            //Assert.IsType<SimplifyApi>(instance);
        }

        /// <summary>
        /// Test SimplifyDocumentPost
        /// </summary>
        [Theory]
        [InlineData("TestData/rewriter_test.docx", "docx", SimplifySupportedFromats.Docx)]
        [InlineData("TestData/rewriter_test.pdf", "pdf", SimplifySupportedFromats.Pdf)]
        public void SimplifyDocumentPostTest(string path, string format, SimplifySupportedFromats formatEnum)
        {
            var file = File.OpenRead(path);
            var url = _fileApi.FileUploadPost(format, file);
            var request = new SimplifyFileRequest("en");
            request.Format = formatEnum;
            request.Url = url;
            request.SavingMode = FileSavingMode.Files;
            request.Origin = "test";
            request.OriginalName = "rewriter_test.docx";
            var response = instance.SimplifyDocumentPost(request);
            Assert.IsType<StatusResponse>(response);
            while (true)
            {
                var result = instance.SimplifyDocumentRequestIdGet(response.Id);
                if (Enum.Parse<System.Net.HttpStatusCode>(result.Status?.ToString() ?? "400") ==
                    System.Net.HttpStatusCode.OK)
                {
                    Assert.NotNull(result.Url);
                    break;
                }
                Thread.Sleep(1000); 
            }
        }

        /// <summary>
        /// Test SimplifyDocumentRequestIdGet
        /// </summary>
        [Fact]
        public void SimplifyDocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.SimplifyDocumentRequestIdGet(requestId);
            //Assert.IsType<SimplifyFileResponse>(response);
        }

        /// <summary>
        /// Test SimplifyHcGet
        /// </summary>
        [Fact]
        public void SimplifyHcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SimplifyHcGet();
            //Assert.IsType<HealthCheckResponse>(response);
        }

        /// <summary>
        /// Test SimplifySupportedConversionsGet
        /// </summary>
        [Fact]
        public void SimplifySupportedConversionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //var response = instance.SimplifySupportedConversionsGet(format);
            //Assert.IsType<List<string>>(response);
        }

        /// <summary>
        /// Test SimplifyTextPost
        /// </summary>
        [Fact]
        public void SimplifyTextPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BaseTextRequest baseTextRequest = null;
            //var response = instance.SimplifyTextPost(baseTextRequest);
            //Assert.IsType<StatusResponse>(response);
        }

        /// <summary>
        /// Test SimplifyTextRequestIdGet
        /// </summary>
        [Fact]
        public void SimplifyTextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.SimplifyTextRequestIdGet(requestId);
            //Assert.IsType<SimplifyTextResponse>(response);
        }
    }
}

  /*
 * GroupDocs.Rewriter API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 23.8.0
 * Contact: anton.perhunov@aspose.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Threading;
using RestSharp;
using Xunit;
using GroupDocs.Rewriter.Cloud.Sdk.Client;
using GroupDocs.Rewriter.Cloud.Sdk.Api;
using GroupDocs.Rewriter.Cloud.Sdk.Client.Auth;
using GroupDocs.Rewriter.Cloud.Sdk.Model;

// uncomment below to import models
//using GroupDocs.Rewriter.Cloud.Sdk.Model;

namespace GroupDocs.Rewriter.Cloud.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing DetectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DetectApiTests : IDisposable
    {
        private DetectApi instance;

        public DetectApiTests()
        {
            var config = new Configuration()
            {
                OAuthClientId = "rewriter.cloud",
                OAuthClientSecret = "f692c7d4b2817c3112c126519b993577",
                OAuthFlow = OAuthFlow.APPLICATION,
                //BasePath = "http://localhost:5000"
            };
            instance = new DetectApi(config);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DetectApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DetectApi
            //Assert.IsType<DetectApi>(instance);
        }

        /// <summary>
        /// Test DetectDocumentPost
        /// </summary>
        [Fact]
        public void DetectDocumentPostTest()
        {
            var file = File.OpenRead("TestData/rewriter_test.docx");
            var bytes = new byte[file.Length];
            file.Read(bytes, 0, bytes.Length);
            var request = new DetectionFileRequest("en");
            request.Format = DetectionFileRequest.FormatEnum.Docx;
            request.File = bytes;
            request.SavingMode = FileSavingMode.Files;
            request.Origin = "test";
            request.OriginalName = "rewriter_test.docx";
            var response = instance.DetectDocumentPost(request);
            Assert.IsType<StatusResponse>(response);
            while (true)
            {
                var result = instance.DetectDocumentRequestIdGet(response.Id);
                if (Enum.Parse<System.Net.HttpStatusCode>(result.StatusCode?.ToString() ?? "400") ==
                    System.Net.HttpStatusCode.OK)
                {
                    Assert.NotEqual(0.0, result.Probability);
                    break;
                }
                Thread.Sleep(1000); 
            }
        }

        /// <summary>
        /// Test DetectDocumentRequestIdGet
        /// </summary>
        [Fact]
        public void DetectDocumentRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DetectDocumentRequestIdGet(requestId);
            //Assert.IsType<CloudDetectorResponse>(response);
        }

        /// <summary>
        /// Test DetectHcGet
        /// </summary>
        [Fact]
        public void DetectHcGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DetectHcGet();
            //Assert.IsType<string>(response);
        }

        /// <summary>
        /// Test DetectTextPost
        /// </summary>
        [Fact]
        public void DetectTextPostTest()
        {
            var textRequest = new DetectionTextRequest("en");
            textRequest.Text = "Abra cadabra";
            textRequest.Origin = "test";
            textRequest.Texts = new List<string>() { "Abra cadabra" };
            var response = instance.DetectTextPost(textRequest);
            Assert.IsType<StatusResponse>(response);
            while (true)
            {
                var result = instance.DetectTextRequestIdGet(response.Id);
                if (Enum.Parse<System.Net.HttpStatusCode>(result.StatusCode?.ToString() ?? "400") ==
                    System.Net.HttpStatusCode.OK)
                {
                    Assert.NotEqual(0.0, result.Probability);
                    break;
                }
                Thread.Sleep(1000);
            }
        }

        /// <summary>
        /// Test DetectTextRequestIdGet
        /// </summary>
        [Fact]
        public void DetectTextRequestIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.DetectTextRequestIdGet(requestId);
            //Assert.IsType<CloudDetectorResponse>(response);
        }
    }
}